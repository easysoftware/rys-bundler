module Rys
  module Bundler
    module Hooks

      # Be careful!!!
      # There is a lot if possibilities
      #
      #   1. Normal gem definition
      #   2. Gem on git (download)
      #   3. Gem on git (not-downloaded)
      #   4. Gem on git locally overriden
      #   5. Gem on local disk
      #
      def self.before_install_all(dependencies)
        plugin_dependencies = []

        dependencies.each do |dependency|
          next if !dependency.groups.include?(:rys)

          # To allow resolving
          dependency.source.remote!

          # Ensure gem
          dependency.source.specs

          # Get dependecies from this file using rys group
          gems_rb = dependency.source.path.join('gems.rb')

          if gems_rb.exist?
            definition = ::Bundler::Dsl.evaluate(gems_rb, ::Bundler.default_lockfile, true)
            rys_dependecies = definition.dependencies.select{|dep| dep.groups.include?(:rys) }
            plugin_dependencies.concat(rys_dependecies)
            merge_definition_sources(definition, ::Bundler.definition)
          end
        end

        # Select only missing dependecies so user can
        # rewrite each dependecny in main gems.rb
        plugin_dependencies = plugin_dependencies.uniq(&:name)
        plugin_dependencies.reject! do |dep1|
          dependencies.any? do |dep2|
            dep1.name == dep2.name
          end
        end

        # Concat them to main Bundler.definition.dependecies
        dependencies.concat(plugin_dependencies)

        # Save them for Bundler.require (rails config/boot.rb)
        save_plugin_dependencies(plugin_dependencies)

        # To ensure main bundler download plugins
        ::Bundler.definition.instance_eval do
          @dependency_changes = true
          # @local_changes = converge_locals
        end
      end

      def self.rys_gemfile(dsl)
        # TODO: Make more bullet-proof test
        if ::Bundler.const_defined?('CLI')
          # Some cli commands
          return
        end

        if dependencies_rb.exist?
          dsl.eval_gemfile(dependencies_rb)
        end
      end

      def self.dependencies_rb
        ::Bundler.root.join('dependencies.rb')
      end

      def self.merge_definition_sources(from_definition, to_definition)
        to_sources = to_definition.send(:sources)

        from_definition.send(:sources).all_sources.map do |source|
          begin
            to_sources.send(:source_list_for, source) << source
          rescue
          end
        end
      end

      def self.save_plugin_dependencies(dependencies)
        File.open(dependencies_rb, 'w') do |f|
          f.puts %{# This file was generated by Rys::Bundler at #{Time.now}}
          f.puts %{# Dependencies are generated after every `bundle` command}
          f.puts %{# Modify at your own risk}
          f.puts

          dependencies.each do |dep|
            source = dep.source
            case source
            when ::Bundler::Source::Git
              f.puts %{gem '#{dep.name}', git: '#{source.uri}', branch: '#{source.branch}', ref: '#{source.ref}'}
            else
              raise "Unknow source '#{source.class}'"
            end
          end
        end
      end

    end
  end
end
